name: "palindrome-detector"

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: app
    container_name: palindrome_detector_app
    restart: always
    volumes:
      - ../migrations:/home/appuser/migrations
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    environment:
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_DEBUG: ${FLASK_DEBUG:-1}
      FLASK_APP: ${FLASK_APP:-run.py}
      FLASK_CONFIG: ${FLASK_CONFIG:-development}
      DATABASE_URL: ${DATABASE_URL}
      CACHE_TYPE: ${CACHE_TYPE:-RedisCache}
      CACHE_REDIS_URL: ${CACHE_REDIS_URL}
      CACHE_DEFAULT_TIMEOUT: ${CACHE_DEFAULT_TIMEOUT:-300}

  db:
    image: postgres:15-alpine
    container_name: palindrome_detector_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vb_database}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: app
    container_name: palindrome_detector_migrations
    volumes:
      - ../migrations:/home/appuser/migrations
    depends_on:
      db:
        condition: service_healthy
    environment:
      FLASK_APP: ${FLASK_APP:-run.py}
      FLASK_CONFIG: ${FLASK_CONFIG:-development}
      DATABASE_URL: ${DATABASE_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    command: /home/appuser/migrations_entrypoint.sh

  redis:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: redis-configured
    container_name: palindrome_detector_redis
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: nginx
    container_name: palindrome_detector_nginx
    ports:
      - "8080:80"
      #- "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      app:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: always

volumes:
  nginx_cache:
  nginx_logs:
  postgres_data:
